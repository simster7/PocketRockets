syntax = "proto3";
package v1;

message PlayerState {
    int32 buttonPosition = 1;
    int32 bettingRound = 2;
    int32 leadPlayer = 3;
    int32 actingPlayer = 4;
    repeated int32 pots = 5;
    repeated int32 playerCards = 6;
    repeated int32 communityCards = 7;
    repeated Seat seats = 8;
    bool isHandActive = 9;
}

message Seat {
    int32 index = 1;
    bool occupied = 2;
    Player player = 3;
}

message Player {
    string name = 1;
    int32 stack = 2;
    int32 seatNumber = 3;
    bool folded = 4;
    bool isAllIn = 5;
    bool sittingOut = 6;
    Action lastAction = 7;
}

message Action {
    int32 actionType = 1;
    int32 value = 2;
}

message GetPlayerStateRequest {
    int32 playerId = 1;
    int32 gameId = 2;
}

message StartGameRequest {
    int32 gameId = 1;
    int32 bigBlind = 2;
    int32 smallBlind = 3;
    bool deterministic = 4;
}

message AddPlayerRequest {
    int32 playerId = 1;
    string name = 2;
    int32 stack = 3;
}

message SitPlayerRequest {
    int32 playerId = 1;
    int32 seatNumber = 2;
    int32 gameId = 3;
}

message StandPlayerRequest {
    int32 playerId = 1;
    int32 seatNumber = 2;
    int32 gameId = 3;
}

message TakeActionRequest {
    int32 playerId = 1;
    Action action = 2;
    int32 gameId = 3;
}

message OperationResponse {
    bool successful = 1;
    string message = 2;
}

message DealHandRequest {
    int32 gameId = 1;
}

service PokerService {
    rpc StartGame(StartGameRequest) returns (OperationResponse) {}
    rpc AddPlayer(AddPlayerRequest) returns (OperationResponse) {}
    rpc SitPlayer(SitPlayerRequest) returns (OperationResponse) {}
    rpc StandPlayer(StandPlayerRequest) returns (OperationResponse) {}
    rpc TakeAction(TakeActionRequest) returns (OperationResponse) {}
    rpc DealHand(DealHandRequest) returns (OperationResponse) {}
    rpc GetPlayerState(GetPlayerStateRequest) returns (PlayerState) {}
}